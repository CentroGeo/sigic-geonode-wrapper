# Common Django template for GeoNode and Celery services below
x-common-django: &default-common-django
  image: ghcr.io/centrogeo/sigic-geonode-wrapper:develop
  restart: unless-stopped
  env_file:
    - .env
  volumes:
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp

services:
  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl -m 10 --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://django:8000/"
      start_period: 120s
      interval: 60s
      timeout: 40s
      retries: 10
    environment:
      - IS_CELERY=False
    entrypoint: ["/usr/src/sigic_geonode/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/sigic_geonode/uwsgi.ini"
    networks:
      - sigic-network

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      django:
        condition: service_healthy
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/sigic_geonode/entrypoint.sh"]
    command: "celery-cmd"
    networks:
      - sigic-network

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    image: ghcr.io/centrogeo/sigic-nginx:${NGINX_BASE_IMAGE_VERSION}
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${NGINX_BASE_IMAGE_VERSION}
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    environment:
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - statics:/mnt/volumes/statics
    restart: unless-stopped
    networks:
      - sigic-network

  # memcached service
  memcached:
    image: memcached:alpine
    container_name: memcached4${COMPOSE_PROJECT_NAME}
    command: memcached ${MEMCACHED_OPTIONS}
    restart: on-failure
    healthcheck:
      test: nc -z 127.0.0.1 11211
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - sigic-network

  # Geoserver backend
  geoserver:
    image: ghcr.io/centrogeo/sigic-geoserver:${GEOSERVER_BASE_IMAGE_VERSION}
    build:
      context: ./docker/geoserver
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_BASE_IMAGE_VERSION}
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl -m 10 --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://geoserver:8080/geoserver/ows"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 6
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp
    restart: unless-stopped
    depends_on:
      data-dir-conf:
        condition: service_healthy
      django:
        condition: service_healthy
    networks:
      - sigic-network

  data-dir-conf:
    image: ${COMPOSE_PROJECT_NAME}/geoserver_data:${GEOSERVER_DATA_BASE_IMAGE_VERSION}
    build:
      context: ./docker/geoserver_data
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_DATA_BASE_IMAGE_VERSION}
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    entrypoint: sleep infinity
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    restart: unless-stopped
    healthcheck:
      test: "ls -A '/geoserver_data/data' | wc -l"
    networks:
      - sigic-network

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3-alpine
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - sigic-network

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  backup-restore:
    name: ${COMPOSE_PROJECT_NAME}-backup-restore
  data:
    name: ${COMPOSE_PROJECT_NAME}-data
  tmp:
    name: ${COMPOSE_PROJECT_NAME}-tmp
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq

networks:
  sigic-network:
    external: true
